Any time I want to write something, lab reports, articles, math, tables, images, slideshows,
I use the same method, VIM, Markdown, and Pandog.
A year ago, literally today, I had no VIM, no Linux, or Git command line experience.
And today, I use Unix exclusively for all programming and document preparation.
Last year, I completely wiped Windows, and I switched 100% to Unix.
I use VIM specifically, uh, NeoVIM, just out of habit.
People told me to use NeoVIM, because it's got support for plugins and stuff.
I never installed plugins, but I still, I use VIM.
Just raw VIM.
My terminal is default.
There's no fancy colors, no skull, color scheme, nothing.
I even switched my keyboard layout to call MacDH with home raw mods, because I was so
serious about trying, uh, this attempt, right?
So a year ago, I was using Visual Studio, Microsoft Visual Studio, and trust me, I really
liked the hot keys in Microsoft Visual Studio.
I would do this alt arrow thing to move the line up and down.
You hold the control shift, and you can do multi-line editing, and stuff.
It was really nice, and I really liked the hot keys, uh, like even the most autistic
people in my major, I swear, in my computer science major, I knew the hot keys better
than them.
So it was a bum to move to VIM, and not be able to use those hot keys anymore.
But after I made the switch, I realized that I didn't need those hot keys.
The reason, let's back up, the reason why I made the switch is I was playing Civ5.
I didn't play a single video game for like a year, and I was starting to realize when
I was playing Civ5, that, uh, if I had the opportunity to, if I'm able to, I'm always
going to use hot keys.
There's never a moment where I'm like, oh, I'm not going to use hot keys, I'd rather
just use the mouse.
I know it, right?
So I kept, you know, you play Civ5 for long enough.
I have like a thousand hours in that game.
I was never a hot key, or keyboard wizard or nothing.
I was a FPS player, I liked using my mouse, I like clicking on stuff, but you do something
for long enough.
You start to gravitate towards the keyboard, it's just so natural and so nice to use the
keyboard.
Instead, you know, Civ5, Civ5 has an amazing UR, it's so nice to click on buttons.
Those buttons are so juicy in Civilization 5, and regardless, you know, every time I'm
building a farm, I'm like, this is so repetitive.
I have to click the farm button every time, and I start to realize every, about every
action in the game you can take with a unit, um, has a hot key, so you just hover over,
oh, you press I to build a farm.
Okay.
And then you slowly learn all the hot keys, like, for example, I could tell you right
now camp.
There's some fur, some little foxes running around in the hex, or there's a, uh, some
ivory, some elephants, H, H is to build a farm, uh, P for plantation, I think, uh, are
for road, you know, I remember, I think I remember a lot of these, I, for farm, I believe,
um, and I started to realize, like, you can't do everything with the mouse, but the
more you can do it, the keyboard, the better.
So I decided to adopt a more terminal centric full, I guess, another person who inspired
me to do this was, uh, I think his name is Soding Daily, TS Oding Daily, this Russian guy,
and I was watching him use, like, e-max and a bunch of other stuff, and I think that
was inspiring, like, oh, I could do this, another guy, um, there's 10, 10, 10, as this
guy's got long hair, he's from Scandinavia, or something I believe, and, um, he made
these videos where he did exclusively keyboard centric stuff.
In 10, 10's videos, he managed to do everything with the keyboard on his computer, and he
talked about Vimalot, and this is where I got introduced to the idea of using Vim, Vim is
a modal editor, right?
So Vim has certain modes where, like, if you mess up suddenly enter a different mode,
and you're not, like, in the text editor, like, you expect to be normally, you can't just
move around with the arrow keys.
In fact, in Vim, you're actively encouraged to not use the arrow keys, you're supposed to
use HJKL, right?
And then it turns out you're not supposed to use that either, necessarily, you're supposed
to learn word-based motions, sentence-based motions, paragraph-based motions, you're supposed
to get as efficient as possible, and take as many shortcuts as possible.
Now a lot of people switch to Unix because they don't want spyware, they don't want the
government to spy on or something or their edgy, or they want to write out their setup
and make it look cooler, I don't mess with any of that.
Like I said, I just use the default terminal, I do not care.
The reason why I use Unix is because I want package managers.
In Windows, I don't know, so many times, you're trying to install something in Windows,
and it's like, how do I, okay, do I get the installer for it, do I get the, do I do it with
the command line or script or what, and then it's just, it's so complicated.
Generally, in Unix, when I need something installed, it's just pseudo-apt installed, and
then the name of what I want, like Firefox, right, pseudo-apt install Firefox, pseudo-apt
install VLC.
Now I got VLC.
Now I got Firefox.
The other thing is like, you do install things on Windows, but sometimes just setting it up,
it just doesn't work.
Like I tried to, I remember trying to install Python on Windows, and it was such a pain,
like it was so hard to install Python, you would think that would be easy, right?
Let's address the alternative, and I used to use these two, of course, Google Docs.
Microsoft Word.
These are nice, because they are hosting your files remotely, and they kind of save stuff
very often, and of course, they have a lot of features, right?
You've got your equations and stuff, if you want to insert those, you can style stuff
however you want, but Mark Down is better, I'll tell you why.
So think about Google Docs, how many times have you been like working with your group
mates, or maybe at work or something, and someone is just in there collaborating, and
they put like a stupid random indent, or they put an inconsistent heading, or they put
like an extra space, or they style like the font, like slightly different sizes, it's
so silly, right?
You're never going to need the feature to have one paragraph be a different size than
the other, right?
You're always going to be wanting to have your paragraph the same size.
You always want consistent headings.
I once had a teacher, and she was teaching a communications class, and she really emphasized
she wanted consistent formatting, and so we couldn't even use Google Docs.
We had to use Microsoft Word, because Microsoft Word was better about making the styling
consistent across headings.
So at the time, I remember thinking there's got to be a better solution to this, right?
Then going through all your headings and selecting them and setting the styling for them
and eventually making sure the consistent rise, it's silly, right?
The funny thing about Google Docs is Google Docs, eventually now Google Docs, lets you
write Mark Down in Google Docs.
If you put a hash into Google Docs, it'll be like, oh, you want a heading one, or if
you put, I think you can bold stuff with like, asterix and stuff, and it just goes to
show how helpful Mark Down is that even Google Docs uses it.
But here's the thing, I'll argue in this video that you should not be worrying about
your styling, you should be worrying about your writing, right?
That's what Mark Down enables you to do.
This syntax is simpler than anything you've ever used.
Mark Down syntax is so simple.
I write a whole Mark Down file, like my whole article or write up or whatever it is, and
then I basically compile it once or twice, and there's no mistakes, like you're not going
to say, oh, I made that huge mistake and then edited a bunch, it's minimal, it's minimal,
you just write something and it's so effortless, versus Google Docs, you have to stare
at the end styling of your product, and you have to worry about the styling, every time
you make something, well, the styling isn't going to change that much per assignment, or
per article, or thing you write.
Use your word about the styling later, write a template, Pandox supports templates, you
can have an HTML template file, and you can use that for any Mark Down file.
Pandox is so simple, right?
You just specify the output file format, or I mean, really, you just specify the output
file and it looks at the file extension and figures out what you need to convert it to.
You can also export to HTML or PDF, and when you export to HTML, you can embed images
in the HTML, so you get all the advantages of PDF minus the disadvantages of PDF.
PDF is slow, PDF sucks with, you have a page break all the time, right?
How many times have you been reading something, and then you have a figure, right?
And then it gets like put on a different page, and then you're supposed to like look
one or two pages ahead to view the figure, it's so stupid.
In the modern age, when everything is being viewed in the browser, we should just be using
HTML, this doesn't make sense to use PDF.
With HTML, if you want to embed an image, it's as simple as you add dash-embed dash resources
for Pandox.
Next, it's funny how people reinvent the wheel.
Like I see people talking all the time about, or not people, but like I've seen instances
where there's like these apps that are for writing, and the thing they're trying to sell
you is that, well, when you revise your writing, there's a lot of stuff you threw
away.
We'll save every version of everything you throw away so that you can compile it later
and make something out of your deleted writing.
And it's just so funny to hear people who don't know, well, we'll just call them normies
who don't know about Git, basically talking about like how they want Git, and you know,
a year ago, I wasn't that good at Git.
I was relying on GitHub desktop if I want to do something.
I had a class where we learned about version control, and I said, this is stupid.
Why do we have to do this with the command line when there's a GUI for it?
This is so like we're doing it the ancient way or whatever.
I had a class where we learned about Unix, and I had to do VIM tutor.
I had to learn VIM, and I was like, this is weird.
Why would I ever edit and VIM or whatever?
What is the point of this?
And I've slowly got humbled over time, and I have arguments with people who are stuck
in the first phase, the phase that I was in.
And they're like, oh, I like to get GUI because I could see it easier.
It's not as hard.
GitHub GUI is a nice application.
However, Git is like the perfect command line tool.
It's like, you know, it's like an example of what command line tools can be, how helpful,
and how useful, and how good they can look.
It's such a nice tool to use over the command line.
And if you're a computer science major or a programmer or a software engineer,
you have no excuse for not learning Git, read the command line.
Anytime you want to do anything complicated, you can't be searching for a little drop-down
menu or some item in a GUI and GitHub desktop when you need to check out a branch or
stash some stuff, or, I don't know, just amend a commit or something like you need to just,
it's not that hard.
I understand that it seems daunting, and it can be really boring to learn these tools
and really scary at first.
But trust, listen, I went a year, a year.
It took me a year to get to the point where I do so much stuff over the terminal.
And note that something else, I got a virtual private server.
A virtual private server, mines in Seattle, it's a computer that is remote on the cloud
that I can access anytime I want.
That's the advantage of using a terminal is that if it's running on Unix,
you can use SSH to access that terminal anywhere in the world.
I can get into that computer from an unrelated computer as long as I have the right password
and permissions and stuff.
It's kind of similar to how in Google Docs, you're like, oh, I'm so glad that I can go to the
browser and use this anywhere and I'll have access to my code.
Well, you have the same thing with Git.
You have the same thing if you have a VPS, right?
Because you can host your files wherever you want.
And in my experience, it's easier to host files on my VPS and share them.
So what I do on my VPS, I have a website.
It's at Ben256.com and what I like to do is I hash my files.
When you hash it generates a signature, it uniquely identifies the file.
That makes sure that I never have duplicates on my server.
Then I put that in the URL along with the file and I can send that to anyone.
And then they can just open it up like you go to Ben256.com.
The notes for this video are Ben256.com slash MarkdownRant.html.
There's also a MarkdownRant.md and that's just one example of how easy it is to share things.
And when I'm in the terminal, like we said earlier, it's so nice to be able to use a package manager.
I found out there's a program called QR and code.
You can sue to apps and install QR and code.
And then when you have your URL that you host on your website,
you just pipe it into QR and code and you can generate a QR code on your laptop.
And then you tell your lab partner, whoever you want to share it with,
hey, scan this on your phone and now they have it on their phone.
No emailing required.
If you don't want to be so specific and have a giant hash in the URL,
then you can just straight up put it on like Ben256.com MarkdownRant.html.
I didn't hash that or anything. I just stuck it on the website to make it convenient to use.
Now, personally, what I do is if I'm going to submit an assignment,
and again, to reiterate, I submitted every single assignment using Markdown.
I haven't submitted any assignments using Google Docs or nothing or anything else.
Whenever they ask for PDF, PDF is a stupid format.
And sometimes, especially if you have a lot of images, it can look really bad in a PDF.
Even if Pam Doc converts it, it does it's best, right?
But if you have a ton of images, they're not going to all fit on one page.
And PDF has the stupid thing where there's page breaks all the time,
as if you're going to print it or something, nobody prints anything anymore.
So it's okay, what you do, the PDF version can be inferior.
And you can upload that to your course website or whoever needs the PDF.
But then, you just put a link in the PDF and link to your HTML version, which is superior,
or I go in the comments of my submission. I say, hey, check out the HTML version.
It's better, even though you ask for a PDF, I gave you one, but the HTML is better.
You might as well read that. And then, I never get any concerns for my greater.
Like, I can't read this because the figures are hard to read.
No, there's an HTML version.
And the HTML version looks so good.
Pandox, default conversion and the styling for HTML looks just good enough.
Like, there's nothing wrong with it.
You can even do slides in HTML using Pandox.
And the library is revealed.js.
And these slides, let me tell you, these slides are superior in every way.
It's a PowerPoint format or whatever.
Because when you export PowerPoint, your browser doesn't open that easily, right?
So what you end up doing is, I just had a class where the teacher, he converted his slides
the PowerPoint format into PDF.
So then, you had to constantly download this stupid huge PDF.
And it was just a waste, right?
Versus HTML, HTML is faster than PDF and just so much more convenient, right?
That's what the browser is for.
How many times are you going to download a PDF file?
PDF, PDF, parentheses one, PDF parentheses two, parentheses three,
parentheses four. How many times am I going to download this file?
If I'm just going to delete it, like, I have to remember to delete it.
That's what the browser is for.
That's why you serve files statically on a website.
HTML slides are epic.
And they look cooler.
They look more professional and more epic, or, okay, objectively.
Now, a lot of people do static site generation.
What that is, basically, is people don't want to have to write raw HTML.
Every time they make a new article, of course.
So, what some people do, well, some people, they do just write HTML.
And that's kind of cringe.
There's this really cool guy. I really like this guy.
He's like a bipolar schizophrenic guy and he's bald.
And his name is Luke Smith and he's like afraid of the government.
So he lives in the woods.
But he has a really excellent tutorial on how to set up your website.
And that's what I followed to set up my website with my VPS and stuff.
And he was a big advocate.
He started making this video.
He was like, look, I'm not to start writing raw HTML.
And it's such a pain to write HTML, like, playing.
Especially if you're doing a lot of it.
Every time you need a paragraph, you need to put a P tag.
It's so goofy.
That's what markdown is for.
You don't want to be opening a tag, enclosing your tag,
and making sure you have a right tag, and then writing your HTML boiler
plate. That's what Pandok handles that for you.
That's what the dash s, the dash dash stand alone flag does in Pandok.
It gives you boiler plate for your HTML.
Converse your markdown into HTML, semantic HTML.
Now, I also, I had a friend who he decided he was going to make a static site.
And he was going to generate it.
He's going to do a static site generator.
And I don't know why people do this.
I've seen a lot of programmers doing this.
They think, oh, I'm a programmer.
I'm going to write it in markdown.
And I'm going to convert it to HTML myself.
Guys, we don't need to reinvent the wheel.
Pandok does everything for us.
If you don't like the styling, that's why you use an HTML template.
And all it does is it does substitution.
It substitutes the text and puts it into the HTML template
that you provide with the styling that you want.
I'll give you an example.
If you go to Ben256.com slash read, I published a bunch of public domain
Plato texts from like Plato, the philosopher.
I was trying to get my friends to replay it.
And it didn't really work.
However, what you could do with this, right?
You can see the site.
I added in a little bar that scrolls.
It shows the completion.
Like how much you've read the article.
I added in a nav that is like statically generated.
There is whenever I update the pages,
there's like an automatic script that runs and updates the last updated.
It's so nice.
There's even footnotes are supported through Markdown.
If you use Pandok, it's so awesome.
And then everything as the right styling, everything looks nice.
You compare that to where I got the source material.
I went to Project Gutenberg and these websites.
Therefore, archival purposes.
They're not for like reading the whole text, right?
They suck for that because they have like these terrible old sites.
They're like horrible to read.
So what you do, or what I did, is I went and I got the UTF8 for it.
I just copied it.
I did a, this tiny little bit of like edits in a VIM to make it
a correctly formatted Markdown file.
Put in a little bit of metadata, title author translator.
And then I just run a script like I do on every other
Plato text that I've uploaded.
So if you go to Ben256.com slash read, you can see that.
And you can see an example of me,
everything I wrote there is Markdown.
Finally, we have to talk about Lawtech.
Lawtech in some ways is important mainly for math equations.
In other ways, it's like a worse version of Markdown.
So I've seen graduate students, they write
entire documents in Lawtech.
And hopefully they're using templates.
If not, they probably want to kill themselves.
Because Lawtech, it has all these slash begins, slash
and use package or like whatever.
There's so much garbage in Lawtech.
Like just to make like an unordered list or something,
it takes so much effort mentally and so much,
you have to remember so much like you might as well just ask AI
to write the Lawtech document for you.
If you're going to write something yourself,
don't write it in Lawtech.
If you want math equations,
well also don't use Google Docs and like go and look through a big menu
with like a big table like, oh, where's my, how do I make a fraction?
Oh, I got to go look for the fraction.
Oh, I got to do the square root.
Instead of doing the goofy parts of Lawtech in Lawtech,
do all the goofy parts of Lawtech in Markdown.
Using Pandok, you can embed Lawtech into your Markdown.
So you get all the upsides of Lawtech.
You can put Lawtech equations into your Markdown.
And then you don't have to do titles or headings with Lawtech.
If you want to be a boomer and write your whole page in just raw HTML,
well, you also don't have an excuse for not using Markdown in Pandok.
You can embed HTML into your Markdown.
If a template isn't working for you, finally,
how many times have you seen a code example in a PDF or something,
especially if you're like a college, like a CS major, right?
The professors, they're always putting these.
They just put these like black and white, like they paste code into Google Docs
and it's black and white.
It's not even, sometimes it's not even mono space.
And there's no syntax highlighting.
This is so goofy.
There's an obvious solution and they just don't bother to find it.
Okay.
The solution is the same thing that your read me uses on GitHub.
When you have a GitHub read me, you write Markdown and you put your code in.
And you do like three backs, backticks.
And then you put the name of the programming language that the code is made out of, right?
And then the GitHub interprets the GitHub interpreter
for the Markdown converts it into HTML or PDF,
or I guess you could get a PDF or whatever.
It does that with correct syntax highlighting for the language.
You can do that with Pandok and Markdown.
You don't need GitHub's version or whatever.
I do this.
I've done this a million times every time I put code in,
I specify the language into the Markdown file.
I embed that code in there.
And then when I export it as HTML, it looks beautiful.
It's correctly syntax highlights it.
It's all mono space, or yeah, it's all mono space.
PDF, PDF sometimes breaks if you have really wide code like a comment.
It's like goes on forever.
But if you export as HTML, you use the standalone flag.
It'll give you a scrollable region.
So it'll get cut off.
But if you want to see the rest of the line, you can scroll horizontally.
So I want to emphasize, like if I wish I had a book to write,
I wish I was like some kind of novelist or author or something,
because it is so enjoyable writing Markdown.
Every time I write Markdown, I'm just, I'm going to climax when I write Markdown, okay?
We got to stop writing inward or docs, okay?
Especially as programmers, it's cringe.
We got to stop doing this.
We shouldn't be rewriting static site generators.
When Pandok does it for us, it's, I installed it once,
and it's amazing and beautiful.
And then next time you're going to make some slides,
consider using Pandok.
Next time you're going to make a website, go ask chat,
Hey, chat, GPT, how do I convert Markdown into HTML with a nice template
so that my HTML styling looks nice?
And just have it generated in an example template,
and then mess with it until you like the styling.
Always use Markdown for, for any writing you do,
because it's distraction free.
You don't have to worry about the styling.
You just spit out some Markdown.
And version control with Git.
Don't be relying on Google Drive or something.
And learn Git via the command line.
You don't have to learn VIM, but VIM helps when you're writing Markdown,
and when basically when you're writing anything, VIM helps.
Also, HTML is the future.
HTML is so much better than PDF, PDF is slow, it sucks.
And we need to stop like this format of like things have page breaks,
and things are cut into pages.
Nobody print stuff anymore.
And additionally, you can print your HTML if you want it printed,
and then you can get it in like a page format.
I've done that whenever I'm making a cheat sheet for my classes,
for my exams.
I'll just write it all on HTML.
Sometimes I'll even ask chat, GPT.
I'll have all the material, I'll say, hey, put this into column,
so it fits on a page nicely.
I'm not going to write that in Google Word or Google Docs.
Now, suddenly you write it in Google Docs in Google Word.
You can't even fit as much stuff on the page
as if you use HTML in the first place,
and just use the print feature, right?
You can print HTML.
You can even specify specific styling for if you're printing.
And then compare and contrast, like you're reading a textbook for your class,
versus have you ever read like a nice medium article,
or maybe someone in this channel has used LearnOpenGL.com.
Like that is such a nice website, such a nice web resource.
These web resources are so cool.
They look nice, they make you feel like an epic gamer,
just by scrolling the room.
These are my takeaways.
It took me a year to learn them, to learn Markdown, using Pandok,
using Git via the command line,
and also like December, Ish, I switched to my new keyboard layout,
and I still use that.
There's so many things you can do.
Try installing Ubuntu, try to dual boot it.
If you don't want to dual boot it, use the Windows
subsystem Linux, or whatever it's called WSL, I think.
Currently, I'm trying to set up a membership
at Ben256.com.
You can check out the website if you want,
but there's no way to sign up.
There's no way to support me there.
But I do recommend if you want updates, go to Discord.
Just don't be a butt head, but I will help you if you go to Discord.
I'm helping people out all the time there,
usually for procedural animation stuff.
There's people in there who will help you out as well,
and you can select Notify for live streams, YouTube uploads,
for code, whatever you want in there.
So you can really get granular with what kind of notifications you receive.
